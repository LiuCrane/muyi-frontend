{"ast":null,"code":"/****   request.js   ****/\n// 导入axios\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport router from '../router/index'; // 使用element-ui Message做消息提醒\n\nimport { Message } from 'element-ui'; //1. 创建新的axios实例，\n\nconst service = axios.create({\n  // 公共接口--这里注意后面会讲\n  baseURL: \"http://124.221.182.242:3001/\",\n  // 超时时间 单位是ms，这里设置了3s的超时时间\n  timeout: 3 * 1000\n}); // 2.请求拦截器\n\nservice.interceptors.request.use(config => {\n  //发请求前做的一些处理，数据转化，配置请求头，设置token,设置loading等，根据需求去添加\n  config.data = JSON.stringify(config.data); //数据转化,也可以使用qs转换\n\n  config.headers = {\n    'Content-Type': 'application/json;charset=UTF-8' //配置请求头\n\n  }; // 如有需要：注意使用token的时候需要引入cookie方法或者用本地localStorage等方法，推荐js-cookie\n\n  const token = Cookies.get('token'); //这里取token之前，你肯定需要先拿到token,存一下\n\n  if (token) {\n    //如果要求携带在参数中\n    config.headers.Authorization = token; // config.headers.token = token; //如果要求携带在请求头中\n  }\n\n  return config;\n}, error => {\n  Promise.reject(error);\n}); // 3.响应拦截器\n\nservice.interceptors.response.use(response => {\n  if (response.data.code === 400101) {\n    router.push('/login');\n  } else {\n    //接收到响应数据并成功后的一些共有的处理，关闭loading等\n    return response.data;\n  }\n}, error => {\n  /***** 接收到异常响应的处理开始 *****/\n  if (error && error.response) {\n    // 1.公共错误处理\n    // 2.根据响应码具体处理\n    switch (error.response.status) {\n      case 400:\n        error.message = '错误请求';\n        break;\n\n      case 401:\n        error.message = '未授权，请重新登录';\n        break;\n\n      case 403:\n        error.message = '拒绝访问';\n        break;\n\n      case 404:\n        error.message = '请求错误,未找到该资源';\n        window.location.href = \"/NotFound\";\n        break;\n\n      case 405:\n        error.message = '请求方法未允许';\n        break;\n\n      case 408:\n        error.message = '请求超时';\n        break;\n\n      case 500:\n        error.message = '服务器端出错';\n        break;\n\n      case 501:\n        error.message = '网络未实现';\n        break;\n\n      case 502:\n        error.message = '网络错误';\n        break;\n\n      case 503:\n        error.message = '服务不可用';\n        break;\n\n      case 504:\n        error.message = '网络超时';\n        break;\n\n      case 505:\n        error.message = 'http版本不支持该请求';\n        break;\n\n      default:\n        error.message = `连接错误${error.response.status}`;\n    }\n  } else {\n    // 超时处理\n    if (JSON.stringify(error).includes('timeout')) {\n      Message.error('服务器响应超时，请刷新当前页');\n    }\n\n    error.message = '连接服务器失败';\n  }\n\n  Message.error(error.message);\n  /***** 处理结束 *****/\n  //如果不需要错误处理，以上的处理过程都可省略\n\n  return Promise.resolve(error.response);\n}); //4.导入文件\n\nexport default service;","map":{"version":3,"names":["axios","Cookies","router","Message","service","create","baseURL","timeout","interceptors","request","use","config","data","JSON","stringify","headers","token","get","Authorization","error","Promise","reject","response","code","push","status","message","window","location","href","includes","resolve"],"sources":["/Users/martin/Downloads/vision-master/src/utils/request.js"],"sourcesContent":["/****   request.js   ****/\r\n// 导入axios\r\nimport axios from 'axios'\r\nimport Cookies from 'js-cookie'\r\nimport router from '../router/index'\r\n// 使用element-ui Message做消息提醒\r\nimport {\r\n  Message\r\n} from 'element-ui';\r\n//1. 创建新的axios实例，\r\nconst service = axios.create({\r\n  // 公共接口--这里注意后面会讲\r\n  baseURL: \"http://124.221.182.242:3001/\",\r\n  // 超时时间 单位是ms，这里设置了3s的超时时间\r\n  timeout: 3 * 1000\r\n})\r\n// 2.请求拦截器\r\nservice.interceptors.request.use(config => {\r\n  //发请求前做的一些处理，数据转化，配置请求头，设置token,设置loading等，根据需求去添加\r\n  config.data = JSON.stringify(config.data); //数据转化,也可以使用qs转换\r\n  config.headers = {\r\n    'Content-Type': 'application/json;charset=UTF-8' //配置请求头\r\n  }\r\n  // 如有需要：注意使用token的时候需要引入cookie方法或者用本地localStorage等方法，推荐js-cookie\r\n  const token = Cookies.get('token'); //这里取token之前，你肯定需要先拿到token,存一下\r\n  if (token) {\r\n    //如果要求携带在参数中\r\n    config.headers.Authorization = token;\r\n    // config.headers.token = token; //如果要求携带在请求头中\r\n  }\r\n  return config\r\n}, error => {\r\n  Promise.reject(error)\r\n})\r\n\r\n// 3.响应拦截器\r\nservice.interceptors.response.use(response => {\r\n  if (response.data.code === 400101) {\r\n    router.push('/login')\r\n  } else {\r\n    //接收到响应数据并成功后的一些共有的处理，关闭loading等\r\n    return response.data\r\n  }\r\n}, error => {\r\n  /***** 接收到异常响应的处理开始 *****/\r\n  if (error && error.response) {\r\n    // 1.公共错误处理\r\n    // 2.根据响应码具体处理\r\n    switch (error.response.status) {\r\n      case 400:\r\n        error.message = '错误请求'\r\n        break;\r\n      case 401:\r\n        error.message = '未授权，请重新登录'\r\n        break;\r\n      case 403:\r\n        error.message = '拒绝访问'\r\n        break;\r\n      case 404:\r\n        error.message = '请求错误,未找到该资源'\r\n        window.location.href = \"/NotFound\"\r\n        break;\r\n      case 405:\r\n        error.message = '请求方法未允许'\r\n        break;\r\n      case 408:\r\n        error.message = '请求超时'\r\n        break;\r\n      case 500:\r\n        error.message = '服务器端出错'\r\n        break;\r\n      case 501:\r\n        error.message = '网络未实现'\r\n        break;\r\n      case 502:\r\n        error.message = '网络错误'\r\n        break;\r\n      case 503:\r\n        error.message = '服务不可用'\r\n        break;\r\n      case 504:\r\n        error.message = '网络超时'\r\n        break;\r\n      case 505:\r\n        error.message = 'http版本不支持该请求'\r\n        break;\r\n      default:\r\n        error.message = `连接错误${error.response.status}`\r\n    }\r\n  } else {\r\n    // 超时处理\r\n    if (JSON.stringify(error).includes('timeout')) {\r\n      Message.error('服务器响应超时，请刷新当前页')\r\n    }\r\n    error.message = '连接服务器失败'\r\n  }\r\n\r\n  Message.error(error.message)\r\n  /***** 处理结束 *****/\r\n  //如果不需要错误处理，以上的处理过程都可省略\r\n  return Promise.resolve(error.response)\r\n})\r\n//4.导入文件\r\nexport default service"],"mappings":"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"},"metadata":{},"sourceType":"module"}